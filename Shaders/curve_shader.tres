[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform float radius:hint_range(0f, 200f);
uniform float angle:hint_range(-6.28318530718, 6.28318530718);
uniform float uv_y_offset;


varying smooth vec2 local_position;

float get_vector_angle(vec2 p_vector)
{
	float ret = acos(dot(vec2(1f, 0f), normalize(p_vector)));
	if (p_vector.y < 0f)
		ret = radians(360f) - ret;
	
	return ret;
}

vec2 get_center(float p_radius, float p_angle)
{
	return vec2(p_radius * sign(-p_angle), 0f);
}

vec4 get_draw_range(vec2 p_texSize, float p_radius, float p_angle)
{
	vec2 halfTexSize = p_texSize / 2f;
	float left = -halfTexSize.x;
	float right = halfTexSize.x;
	float top = 0f;
	float bottom = p_radius;
	if (p_angle == 0.0)
	{
		return vec4(left, right, top, bottom);
	}
	
	vec2 center = get_center(p_radius, p_angle);
//	float centerAngle = get_vector_angle(center);
	bottom = top;
	
	
	float lastAngle = p_angle;
	if (lastAngle < 0f)
		lastAngle += radians(180f);
	
	vec2 lastDir = vec2(cos(lastAngle), sin(lastAngle));
	vec2 lastVec = lastDir * p_radius;
	vec2 lastPos = center + lastVec;

	vec2 lastPos1 = lastPos + lastDir * halfTexSize.x;
	vec2 lastPos2 = lastPos - lastDir * halfTexSize.x;
		
	if (p_angle >= radians(180f))
		left = -p_radius * 2.0 - halfTexSize.x;
	else
		left = min(min(lastPos1.x, lastPos2.x), left);
	
	if (p_angle <= -radians(180f))
		right = p_radius * 2.0 + halfTexSize.x;
	else
		right = max(max(lastPos1.x, lastPos2.x), right);
	
	if (abs(p_angle) >= radians(270f))
		top = -p_radius - halfTexSize.x;
	else
		top = min(min(lastPos1.y, lastPos2.y), top);
	
	if (abs(p_angle) >= radians(90f))
		bottom = p_radius + halfTexSize.x;
	else
		bottom = max(max(lastPos1.y, lastPos2.y), bottom);
	
	return vec4(left, right, top, bottom);
}

void vertex()
{
	vec2 texSize = vec2(1f) / TEXTURE_PIXEL_SIZE;
	vec4 mainRange = get_draw_range(texSize, radius, angle);

	float left = mainRange.r;
	float right = mainRange.g;
	float top = mainRange.b;
	float bottom = mainRange.a;
	
	vec2 offset = vec2((left + right) / 2f, (top + bottom) / 2f);
	vec2 scale = vec2(right - left, bottom - top);
	VERTEX *= scale * TEXTURE_PIXEL_SIZE;
	VERTEX += offset;
	local_position = VERTEX;
}


void fragment()
{
	vec2 texSize = vec2(textureSize(TEXTURE, 0));
	float halfW = texSize.x * 0.5;
	vec2 center = vec2(radius * -sign(angle), 0f);
	vec2 v = local_position - center;
	float dist = length(v);
	if (dist < radius - halfW || dist > radius + halfW)
	{
		discard;
	}
	else
	{
		vec2 startDir = vec2(sign(angle), 0f);
		vec2 startN = vec2(cos(radians(90f)), sin(radians(90f)));
		float a = angle;
		if (a < 0f)
		{
			a += radians(180f);
		}
		vec2 endN = vec2(cos(a - radians(90f*sign(angle))), sin(a - radians(90f*sign(angle))));
		bool valid = false;
		float vDotStartN = dot(v, startN);
		if (abs(angle) < radians(180f))
		{
			if (vDotStartN > 0f && dot(v, endN) > 0f)
				valid = true;
		}
		else
		{
			if (vDotStartN > 0f || dot(v, endN) > 0f)
				valid = true;
		}
		
		if (!valid)
			discard;
		else
		{
			vec2 uv;
			uv.x = ((dist - (radius - halfW)) / texSize.x - 0.5) * startDir.x + 0.5;
			float vAngle = acos(dot(normalize(v), startDir));
			if (vDotStartN < 0f)
			{
				vAngle = radians(360f) - vAngle;
			}
			uv.y = (radius * vAngle + uv_y_offset) / texSize.y;
			uv = mod(uv, 1.0);
			COLOR = texture(TEXTURE, uv);
		}
	}
}

"
